Big-O 

Its the 'longest' amount of time any function is going to take, given the worst case scenario of input (ex. hundreds of data)

Big Omega = the best case
Big Theta = the average case
Big O = the worst case // only care about this: what is the slowest possible thing that can happen in this function 

Write a function that iterates through an array and find the desired number in that array: 

function search(arr, num) {
  for (let i = 0, i < arr.length, i++) {
    if (arr[i] === num ){
      return true
    } else {
      return false 
    }
  }
};

//Big Omega
In this case, Big Omega is when 'num' is located at index 0

Its in constant time, no matter how big the dataset is, it will always(thus 'constant time') return the same result 

omega(1)

//Big Theta
In this case, its going through the entire array and in the middle you find the 'num' = Big data n/2 but we drop 2 to ignore the rest of numbers 

theta(n)

//Big O
The worst case which is to go through the entire dataset and doesnt find the 'num'

O(n)


//Graph
O(n!), O(2 to n), O(n squared) <-- worst/longest time
  
O(n log n) <-- reassonable time: the trick is every time you iterate over an array, you reduce/filter the number of elements you need to iterate over ex) binary tree

O(n) <-- base case: going through an entire array at a worst case scenario ex) for loop

O(log n) <-- this is getting better: you reduce the number of dataset as you iterate over 


//Cheating way
The trick is look at the number of loops/for loops 

ex)
  for(let i...) {
    for (let i...) {
        for let (i...) {
          //If one for loop = Big O(n) this is Big O(n to the third)
      }
    }
  }
    
ex) 
  arr.map(item => {
    arr.forEach(i => {
      arr.filter( x => {
        // Big O(n to the third)
      })
    })
  })


!! Count the loops to figure out Big O time


Onsite Javascript Interview
- String Methods
1. Split -> turns string into array, and with that array you can manipulate in any way
2. toLowerCase() -> always turn them into lowercase to compare two strings
3. substring(indexStart, indexEnd) -> extracts parts of a string

ex. const str = 'Mozilla';

console.log(str.substring(1, 3));
// expected output: "oz"

console.log(str.substring(2));
// expected output: "zilla"

4. startsWith() -> returns true or false based on the parameter you are trying to find in the string

Strings are 'immutable', so turn them into arrays to manipulate them


Reverse String

//Solution 1
function reverse(str) {
  return str.split('').reverse().join('');
}

//Solution 2
function reverse(str) {
  let reversed = '';
  for (var i = str.length - 1; i >= 0; i--) {
    reversed += str[i];
  }
  
  return reversed;
}

!Notice for backwards for loop, you start i at the length of the array minus one

reverse('Hello, world!')


Array Methods
1. array.from(arraylikeObj) -> creates a shallow array copy from 'array-like' objects (ex. string)
2. Object.entries(obj) -> returns arrays of an object in the form of key-value pairs

ex.  console.log(Object.entries(object1)); // Array [Array ["a", "somestring"], Array ["b", 42]]

!Know which of array methods return new arrays and which don't 

3. isArray() -> tells you if the passed in parameter is an array or not
4. filter()
5. reduce()
6. concat() -> array1.concat(array2)  //array1 + array2
7. join()
8. pop(), push()
9. map()

//Function to remove duplicates and only have unique values: 

const str = 'This is is a test test string is';

function removeDuplicates(str){
  const arr = str.split(' ');
  
  const set = new Set(arr); // set is a data structure that has unique values 
  const newStr = set.join(' '); 
  
  return newStr;
}

removeDuplicates(str); 


Flattening 
- It means make arrays within arrays within arrays just one new array

ex) // const exampleArray = [1,2,[3,4, [5,6,7], 8], 9, 10];
    // flatten(exampleArray); // [1,2,3,4,5,6,7,8,9,10]
